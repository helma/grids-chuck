/*
https://mutable-instruments.net/modules/grids/manual/
https://github.com/pichenettes/eurorack/tree/master/grids
https://forum.mutable-instruments.net/t/understanding-code-grids-u8mix-and-bitshift-in-pattern-generator-cc/3862
https://github.com/geertphg/MIdrum/blob/master/grids_resouces.ino
https://en.wikipedia.org/wiki/Bilinear_interpolation
http://www.arj.no/2013/10/18/bits/
*/

[
  [
    255, 0, 0, 0, 0, 0, 145, 0,
    0, 0, 0, 0, 218, 0, 0, 0,
    72, 0, 36, 0, 182, 0, 0, 0,
    109, 0, 0, 0, 72, 0, 0, 0,
    36, 0, 109, 0, 0, 0, 8, 0,
    255, 0, 0, 0, 0, 0, 72, 0,
    0, 0, 182, 0, 0, 0, 36, 0,
    218, 0, 0, 0, 145, 0, 0, 0,
    170, 0, 113, 0, 255, 0, 56, 0,
    170, 0, 141, 0, 198, 0, 56, 0,
    170, 0, 113, 0, 226, 0, 28, 0,
    170, 0, 113, 0, 198, 0, 85, 0
  ],
  [
    229, 0, 25, 0, 102, 0, 25, 0,
    204, 0, 25, 0, 76, 0, 8, 0,
    255, 0, 8, 0, 51, 0, 25, 0,
    178, 0, 25, 0, 153, 0, 127, 0,
    28, 0, 198, 0, 56, 0, 56, 0,
    226, 0, 28, 0, 141, 0, 28, 0,
    28, 0, 170, 0, 28, 0, 28, 0,
    255, 0, 113, 0, 85, 0, 85, 0,
    159, 0, 159, 0, 255, 0, 63, 0,
    159, 0, 159, 0, 191, 0, 31, 0,
    159, 0, 127, 0, 255, 0, 31, 0,
    159, 0, 127, 0, 223, 0, 95, 0
  ],
  [
    255, 0, 0, 0, 127, 0, 0, 0,
    0, 0, 102, 0, 0, 0, 229, 0,
    0, 0, 178, 0, 204, 0, 0, 0,
    76, 0, 51, 0, 153, 0, 25, 0,
    0, 0, 127, 0, 0, 0, 0, 0,
    255, 0, 191, 0, 31, 0, 63, 0,
    0, 0, 95, 0, 0, 0, 0, 0,
    223, 0, 0, 0, 31, 0, 159, 0,
    255, 0, 85, 0, 148, 0, 85, 0,
    127, 0, 85, 0, 106, 0, 63, 0,
    212, 0, 170, 0, 191, 0, 170, 0,
    85, 0, 42, 0, 233, 0, 21, 0
  ],
  [
    255, 0, 212, 0, 63, 0, 0, 0,
    106, 0, 148, 0, 85, 0, 127, 0,
    191, 0, 21, 0, 233, 0, 0, 0,
    21, 0, 170, 0, 0, 0, 42, 0,
    0, 0, 0, 0, 141, 0, 113, 0,
    255, 0, 198, 0, 0, 0, 56, 0,
    0, 0, 85, 0, 56, 0, 28, 0,
    226, 0, 28, 0, 170, 0, 56, 0,
    255, 0, 231, 0, 255, 0, 208, 0,
    139, 0, 92, 0, 115, 0, 92, 0,
    185, 0, 69, 0, 46, 0, 46, 0,
    162, 0, 23, 0, 208, 0, 46, 0
  ],
  [
    255, 0, 31, 0, 63, 0, 63, 0,
    127, 0, 95, 0, 191, 0, 63, 0,
    223, 0, 31, 0, 159, 0, 63, 0,
    31, 0, 63, 0, 95, 0, 31, 0,
    8, 0, 0, 0, 95, 0, 63, 0,
    255, 0, 0, 0, 127, 0, 0, 0,
    8, 0, 0, 0, 159, 0, 63, 0,
    255, 0, 223, 0, 191, 0, 31, 0,
    76, 0, 25, 0, 255, 0, 127, 0,
    153, 0, 51, 0, 204, 0, 102, 0,
    76, 0, 51, 0, 229, 0, 127, 0,
    153, 0, 51, 0, 178, 0, 102, 0
  ],
  [
    255, 0, 51, 0, 25, 0, 76, 0,
    0, 0, 0, 0, 102, 0, 0, 0,
    204, 0, 229, 0, 0, 0, 178, 0,
    0, 0, 153, 0, 127, 0, 8, 0,
    178, 0, 127, 0, 153, 0, 204, 0,
    255, 0, 0, 0, 25, 0, 76, 0,
    102, 0, 51, 0, 0, 0, 0, 0,
    229, 0, 25, 0, 25, 0, 204, 0,
    178, 0, 102, 0, 255, 0, 76, 0,
    127, 0, 76, 0, 229, 0, 76, 0,
    153, 0, 102, 0, 255, 0, 25, 0,
    127, 0, 51, 0, 204, 0, 51, 0
  ],
  [
    255, 0, 0, 0, 223, 0, 0, 0,
    31, 0, 8, 0, 127, 0, 0, 0,
    95, 0, 0, 0, 159, 0, 0, 0,
    95, 0, 63, 0, 191, 0, 0, 0,
    51, 0, 204, 0, 0, 0, 102, 0,
    255, 0, 127, 0, 8, 0, 178, 0,
    25, 0, 229, 0, 0, 0, 76, 0,
    204, 0, 153, 0, 51, 0, 25, 0,
    255, 0, 226, 0, 255, 0, 255, 0,
    198, 0, 28, 0, 141, 0, 56, 0,
    170, 0, 56, 0, 85, 0, 28, 0,
    170, 0, 28, 0, 113, 0, 56, 0
  ],
  [
    223, 0, 0, 0, 63, 0, 0, 0,
    95, 0, 0, 0, 223, 0, 31, 0,
    255, 0, 0, 0, 159, 0, 0, 0,
    127, 0, 31, 0, 191, 0, 31, 0,
    0, 0, 0, 0, 109, 0, 0, 0,
    218, 0, 0, 0, 182, 0, 72, 0,
    8, 0, 36, 0, 145, 0, 36, 0,
    255, 0, 8, 0, 182, 0, 72, 0,
    255, 0, 72, 0, 218, 0, 36, 0,
    218, 0, 0, 0, 145, 0, 0, 0,
    255, 0, 36, 0, 182, 0, 36, 0,
    182, 0, 0, 0, 109, 0, 0, 0
  ],
  [
    255, 0, 0, 0, 218, 0, 0, 0,
    36, 0, 0, 0, 218, 0, 0, 0,
    182, 0, 109, 0, 255, 0, 0, 0,
    0, 0, 0, 0, 145, 0, 72, 0,
    159, 0, 0, 0, 31, 0, 127, 0,
    255, 0, 31, 0, 0, 0, 95, 0,
    8, 0, 0, 0, 191, 0, 31, 0,
    255, 0, 31, 0, 223, 0, 63, 0,
    255, 0, 31, 0, 63, 0, 31, 0,
    95, 0, 31, 0, 63, 0, 127, 0,
    159, 0, 31, 0, 63, 0, 31, 0,
    223, 0, 223, 0, 191, 0, 191, 0
  ],
  [
    226, 0, 28, 0, 28, 0, 141, 0,
    8, 0, 8, 0, 255, 0, 8, 0,
    113, 0, 28, 0, 198, 0, 85, 0,
    56, 0, 198, 0, 170, 0, 28, 0,
    8, 0, 95, 0, 8, 0, 8, 0,
    255, 0, 63, 0, 31, 0, 223, 0,
    8, 0, 31, 0, 191, 0, 8, 0,
    255, 0, 127, 0, 127, 0, 159, 0,
    115, 0, 46, 0, 255, 0, 185, 0,
    139, 0, 23, 0, 208, 0, 115, 0,
    231, 0, 69, 0, 255, 0, 162, 0,
    139, 0, 115, 0, 231, 0, 92, 0
  ],
  [
    145, 0, 0, 0, 0, 0, 109, 0,
    0, 0, 0, 0, 255, 0, 109, 0,
    72, 0, 218, 0, 0, 0, 0, 0,
    36, 0, 0, 0, 182, 0, 0, 0,
    0, 0, 127, 0, 159, 0, 127, 0,
    159, 0, 191, 0, 223, 0, 63, 0,
    255, 0, 95, 0, 31, 0, 95, 0,
    31, 0, 8, 0, 63, 0, 8, 0,
    255, 0, 0, 0, 145, 0, 0, 0,
    182, 0, 109, 0, 109, 0, 109, 0,
    218, 0, 0, 0, 72, 0, 0, 0,
    182, 0, 72, 0, 182, 0, 36, 0
  ],
  [
    255, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    255, 0, 0, 0, 218, 0, 72, 36,
    0, 0, 182, 0, 0, 0, 145, 109,
    0, 0, 127, 0, 0, 0, 42, 0,
    212, 0, 0, 212, 0, 0, 212, 0,
    0, 0, 0, 0, 42, 0, 0, 0,
    255, 0, 0, 0, 170, 170, 127, 85,
    145, 0, 109, 109, 218, 109, 72, 0,
    145, 0, 72, 0, 218, 0, 109, 0,
    182, 0, 109, 0, 255, 0, 72, 0,
    182, 109, 36, 109, 255, 109, 109, 0
  ],
  [
    255, 0, 0, 0, 255, 0, 191, 0,
    0, 0, 0, 0, 95, 0, 63, 0,
    31, 0, 0, 0, 223, 0, 223, 0,
    0, 0, 8, 0, 159, 0, 127, 0,
    0, 0, 85, 0, 56, 0, 28, 0,
    255, 0, 28, 0, 0, 0, 226, 0,
    0, 0, 170, 0, 56, 0, 113, 0,
    198, 0, 0, 0, 113, 0, 141, 0,
    255, 0, 42, 0, 233, 0, 63, 0,
    212, 0, 85, 0, 191, 0, 106, 0,
    191, 0, 21, 0, 170, 0, 8, 0,
    170, 0, 127, 0, 148, 0, 148, 0
  ],
  [
    255, 0, 0, 0, 0, 0, 63, 0,
    191, 0, 95, 0, 31, 0, 223, 0,
    255, 0, 63, 0, 95, 0, 63, 0,
    159, 0, 0, 0, 0, 0, 127, 0,
    72, 0, 0, 0, 0, 0, 0, 0,
    255, 0, 0, 0, 0, 0, 0, 0,
    72, 0, 72, 0, 36, 0, 8, 0,
    218, 0, 182, 0, 145, 0, 109, 0,
    255, 0, 162, 0, 231, 0, 162, 0,
    231, 0, 115, 0, 208, 0, 139, 0,
    185, 0, 92, 0, 185, 0, 46, 0,
    162, 0, 69, 0, 162, 0, 23, 0
  ],
  [
    255, 0, 0, 0, 51, 0, 0, 0,
    0, 0, 0, 0, 102, 0, 0, 0,
    204, 0, 0, 0, 153, 0, 0, 0,
    0, 0, 0, 0, 51, 0, 0, 0,
    0, 0, 0, 0, 8, 0, 36, 0,
    255, 0, 0, 0, 182, 0, 8, 0,
    0, 0, 0, 0, 72, 0, 109, 0,
    145, 0, 0, 0, 255, 0, 218, 0,
    212, 0, 8, 0, 170, 0, 0, 0,
    127, 0, 0, 0, 85, 0, 8, 0,
    255, 0, 8, 0, 170, 0, 0, 0,
    127, 0, 0, 0, 42, 0, 8, 0
  ],
  [
    255, 0, 0, 0, 0, 0, 0, 0,
    36, 0, 0, 0, 182, 0, 0, 0,
    218, 0, 0, 0, 0, 0, 0, 0,
    72, 0, 0, 0, 145, 0, 109, 0,
    36, 0, 36, 0, 0, 0, 0, 0,
    255, 0, 0, 0, 182, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 109,
    218, 0, 0, 0, 145, 0, 72, 72,
    255, 0, 28, 0, 226, 0, 56, 0,
    198, 0, 0, 0, 0, 0, 28, 28,
    170, 0, 0, 0, 141, 0, 0, 0,
    113, 0, 0, 0, 85, 85, 85, 85
  ],
  [
    255, 0, 0, 0, 0, 0, 95, 0,
    0, 0, 127, 0, 0, 0, 0, 0,
    223, 0, 95, 0, 63, 0, 31, 0,
    191, 0, 0, 0, 159, 0, 0, 0,
    0, 0, 31, 0, 255, 0, 0, 0,
    0, 0, 95, 0, 223, 0, 0, 0,
    0, 0, 63, 0, 191, 0, 0, 0,
    0, 0, 0, 0, 159, 0, 127, 0,
    141, 0, 28, 0, 28, 0, 28, 0,
    113, 0, 8, 0, 8, 0, 8, 0,
    255, 0, 0, 0, 226, 0, 0, 0,
    198, 0, 56, 0, 170, 0, 85, 0
  ],
  [
    255, 0, 0, 0, 8, 0, 0, 0,
    182, 0, 0, 0, 72, 0, 0, 0,
    218, 0, 0, 0, 36, 0, 0, 0,
    145, 0, 0, 0, 109, 0, 0, 0,
    0, 0, 51, 25, 76, 25, 25, 0,
    153, 0, 0, 0, 127, 102, 178, 0,
    204, 0, 0, 0, 0, 0, 255, 0,
    0, 0, 102, 0, 229, 0, 76, 0,
    113, 0, 0, 0, 141, 0, 85, 0,
    0, 0, 0, 0, 170, 0, 0, 0,
    56, 28, 255, 0, 0, 0, 0, 0,
    198, 0, 0, 0, 226, 0, 0, 0
  ],
  [
    255, 0, 8, 0, 28, 0, 28, 0,
    198, 0, 56, 0, 56, 0, 85, 0,
    255, 0, 85, 0, 113, 0, 113, 0,
    226, 0, 141, 0, 170, 0, 141, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    255, 0, 0, 0, 127, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    63, 0, 0, 0, 191, 0, 0, 0,
    255, 0, 0, 0, 255, 0, 127, 0,
    0, 0, 85, 0, 0, 0, 212, 0,
    0, 0, 212, 0, 42, 0, 170, 0,
    0, 0, 127, 0, 0, 0, 0, 0
  ],
  [
    255, 0, 0, 0, 0, 0, 218, 0,
    182, 0, 0, 0, 0, 0, 145, 0,
    145, 0, 36, 0, 0, 0, 109, 0,
    109, 0, 0, 0, 72, 0, 36, 0,
    0, 0, 0, 0, 109, 0, 8, 0,
    72, 0, 0, 0, 255, 0, 182, 0,
    0, 0, 0, 0, 145, 0, 8, 0,
    36, 0, 8, 0, 218, 0, 182, 0,
    255, 0, 0, 0, 0, 0, 226, 0,
    85, 0, 0, 0, 141, 0, 0, 0,
    0, 0, 0, 0, 170, 0, 56, 0,
    198, 0, 0, 0, 113, 0, 28, 0
  ],
  [
    255, 0, 0, 0, 113, 0, 0, 0,
    198, 0, 56, 0, 85, 0, 28, 0,
    255, 0, 0, 0, 226, 0, 0, 0,
    170, 0, 0, 0, 141, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    255, 0, 145, 0, 109, 0, 218, 0,
    36, 0, 182, 0, 72, 0, 72, 0,
    255, 0, 0, 0, 0, 0, 109, 0,
    36, 0, 36, 0, 145, 0, 0, 0,
    72, 0, 72, 0, 182, 0, 0, 0,
    72, 0, 72, 0, 218, 0, 0, 0,
    109, 0, 109, 0, 255, 0, 0, 0
  ],
  [
    255, 0, 0, 0, 218, 0, 0, 0,
    145, 0, 0, 0, 36, 0, 0, 0,
    218, 0, 0, 0, 36, 0, 0, 0,
    182, 0, 72, 0, 0, 0, 109, 0,
    0, 0, 0, 0, 8, 0, 0, 0,
    255, 0, 85, 0, 212, 0, 42, 0,
    0, 0, 0, 0, 8, 0, 0, 0,
    85, 0, 170, 0, 127, 0, 42, 0,
    109, 0, 109, 0, 255, 0, 0, 0,
    72, 0, 72, 0, 218, 0, 0, 0,
    145, 0, 182, 0, 255, 0, 0, 0,
    36, 0, 36, 0, 218, 0, 8, 0
  ],
  [
    255, 0, 0, 0, 42, 0, 0, 0,
    212, 0, 0, 0, 8, 0, 212, 0,
    170, 0, 0, 0, 85, 0, 0, 0,
    212, 0, 8, 0, 127, 0, 8, 0,
    255, 0, 85, 0, 0, 0, 0, 0,
    226, 0, 85, 0, 0, 0, 198, 0,
    0, 0, 141, 0, 56, 0, 0, 0,
    170, 0, 28, 0, 0, 0, 113, 0,
    113, 0, 56, 0, 255, 0, 0, 0,
    85, 0, 56, 0, 226, 0, 0, 0,
    0, 0, 170, 0, 0, 0, 141, 0,
    28, 0, 28, 0, 198, 0, 28, 0
  ],
  [
    255, 0, 0, 0, 229, 0, 0, 0,
    204, 0, 204, 0, 0, 0, 76, 0,
    178, 0, 153, 0, 51, 0, 178, 0,
    178, 0, 127, 0, 102, 51, 51, 25,
    0, 0, 0, 0, 0, 0, 0, 31,
    0, 0, 0, 0, 255, 0, 0, 31,
    0, 0, 8, 0, 0, 0, 191, 159,
    127, 95, 95, 0, 223, 0, 63, 0,
    255, 0, 255, 0, 204, 204, 204, 204,
    0, 0, 51, 51, 51, 51, 0, 0,
    204, 0, 204, 0, 153, 153, 153, 153,
    153, 0, 0, 0, 102, 102, 102, 102
  ],
  [
    170, 0, 0, 0, 0, 255, 0, 0,
    198, 0, 0, 0, 0, 28, 0, 0,
    141, 0, 0, 0, 0, 226, 0, 0,
    56, 0, 0, 113, 0, 85, 0, 0,
    255, 0, 0, 0, 0, 113, 0, 0,
    85, 0, 0, 0, 0, 226, 0, 0,
    141, 0, 0, 8, 0, 170, 56, 56,
    198, 0, 0, 56, 0, 141, 28, 0,
    255, 0, 0, 0, 0, 191, 0, 0,
    159, 0, 0, 0, 0, 223, 0, 0,
    95, 0, 0, 0, 0, 63, 0, 0,
    127, 0, 0, 0, 0, 31, 0, 0
  ]
] @=> int nodes[][];

[
  [ nodes[10], nodes[8], nodes[0], nodes[9], nodes[11] ],
  [ nodes[15], nodes[7], nodes[13], nodes[12], nodes[6] ],
  [ nodes[18], nodes[14], nodes[4], nodes[5], nodes[3] ],
  [ nodes[23], nodes[16], nodes[21], nodes[1], nodes[2] ],
  [ nodes[24], nodes[19], nodes[17], nodes[20], nodes[22] ]
] @=> int drum_map[][][];

0 => float x;
0 => float y;
0 => int step;
[0,0,0] @=>  int densities[];
[47,51,61] @=>  int notes[];
[75,75,75] @=>  int velocities[];
[48,50,58] @=>  int accent_notes[];
[100,100,100] @=>  int accent_velocities[];
// TODO
//[Math.rand2(0,32),Math.rand2(0,32),Math.rand2(0,32)] @=>  int perturbations[];

32 => int steps_per_pattern;
0 => int ticks;
0 => int running;
//0.5::second => dur step_dur;

MidiIn sc4_in;   
MidiMsg sc4_in_msg;
if( !sc4_in.open( Std.atoi(me.arg(0)) ) ) me.exit(); 
MidiOut sc4_out;
if( !sc4_out.open( Std.atoi(me.arg(1)) ) ) me.exit(); 

// init SC4
MidiMsg msg;
176 => msg.data1;
0 => msg.data2;
(x*127) $ int => msg.data3;
sc4_out.send(msg);
1 => msg.data2;
(y*127) $ int => msg.data3;
sc4_out.send(msg);
for (0=>int i;i<3;i++) {
  i+4 => msg.data2;
  densities[i]/2 => msg.data3;
  sc4_out.send(msg);
}

MidiIn renoise_in; 
MidiMsg renoise_in_msg; 
if( !renoise_in.open( Std.atoi(me.arg(2)) ) ) me.exit();
MidiOut renoise_out; 
if( !renoise_out.open( Std.atoi(me.arg(3)) ) ) me.exit(); 

fun void note(int i,int n, int v) {
  MidiMsg msg;
  0x80+i => msg.data1;
  n => msg.data2;
  0 => msg.data3;
  renoise_out.send(msg);
  0x90+i => msg.data1;
  v => msg.data3;
  renoise_out.send(msg);
}

fun void read_drum_map() {
// x,y 0..1, inst < 4, step < 32
  Math.floor(3*x)$int => int i;
  Math.floor(3*y)$int => int j;
  (x*1024)$int%256 => int xx;
  (y*1024)$int%256 => int yy;
  255-xx => int xx_inv;          
  255-yy => int yy_inv;
  int levels[3];

  for (0 => int inst;inst<3;inst++) {
    (inst * steps_per_pattern) + step => int offset;
    drum_map[i][j][offset] => int a;
    drum_map[i+1][j][offset] => int b;
    drum_map[i][j+1][offset] => int c;
    drum_map[i+1][j+1][offset] => int d;
    (xx*b + xx_inv*a)/255 => int ab;         // 16bit but 8bits shifted, so effectively only 8bit
    (xx*d + xx_inv*c)/255 => int cd;
    (yy * cd + yy_inv * ab)/255 => int level;    
    // apply pertubation
    if (level > 255-densities[inst]) {
      note(inst,notes[inst],velocities[inst]);
      if (level > 192) { note(inst,accent_notes[inst],accent_velocities[inst]); }
    }
  }
}

fun void sync() {
  while (true) {
    renoise_in => now;                 // wait on the event 'min'
    while( renoise_in.recv(renoise_in_msg) ) {        // get the message(s)
      if (renoise_in_msg.data1 == 250)   { 0 => ticks; 1 => running; }     // start
      else if (renoise_in_msg.data1 == 251)   { 1 => running; }     // continue
      else if (renoise_in_msg.data1 == 252)   { 0 => running; }     // stop
      else if (renoise_in_msg.data1 == 248 && running)   {      // clock
        if (ticks % 3 == 0) { // 32th 24 ppqn (pulses per quarter note)
          read_drum_map();
          (step+1) % steps_per_pattern => step;
          //if (step == 0) { // At the beginning of a pattern, decide on perturbation levels.
            //[Math.rand2(0,32),Math.rand2(0,32),Math.rand2(0,32)] @=> perturbations[];
          //}
        }
        ticks++;
      }
    }
  }
}

fun void sc4() {
  // TODO send settings
  while (true) {
    sc4_in => now;                 // wait on the event 'min'
    while( sc4_in.recv(sc4_in_msg) ) {        // get the message(s)
      if (sc4_in_msg.data1 == 176) {
        sc4_in_msg.data2/8 => int group;
        sc4_in_msg.data2%8 => int enc;
        sc4_in_msg.data3 => int val;
        if (group == 0) {
          if (enc == 0) { val$float/127 => x; }
          else if (enc == 1) { val$float/127 => y; }
          else if (enc > 3 && enc < 7) { val*2 => densities[enc-4]; }
        }
      }
    }
    //<<< sc4_in_msg.data1,sc4_in_msg.data2,sc4_in_msg.data3 >>>;
  }
}

spork ~ sc4();
sync();
/*

void PatternGenerator::EvaluateDrums() {
  // At the beginning of a pattern, decide on perturbation levels.
  if (step_ == 0) {
    for (uint8_t i = 0; i < kNumParts; ++i) {
      uint8_t randomness = options_.swing
          ? 0 : settings_.options.drums.randomness >> 2;
      part_perturbation_[i] = U8U8MulShift8(Random::GetByte(), randomness);
    }
  }
  
  uint8_t instrument_mask = 1;
  uint8_t x = settings_.options.drums.x;
  uint8_t y = settings_.options.drums.y;
  uint8_t accent_bits = 0;
  for (uint8_t i = 0; i < kNumParts; ++i) {
    uint8_t level = ReadDrumMap(step_, i, x, y);
    if (level < 255 - part_perturbation_[i]) {
      level += part_perturbation_[i];
    } else {
      // The sequencer from Anushri uses a weird clipping rule here. Comment
      // this line to reproduce its behavior.
      level = 255;
    }
    uint8_t threshold = ~settings_.density[i];
    if (level > threshold) {
      if (level > 192) {
        accent_bits |= instrument_mask;
      }
      state_ |= instrument_mask;
    }
    instrument_mask <<= 1;
  }
  if (output_clock()) {
    state_ |= accent_bits ? OUTPUT_BIT_COMMON : 0;
    state_ |= step_ == 0 ? OUTPUT_BIT_RESET : 0;
  } else {
    state_ |= accent_bits << 3;
  }
}
for i, p in enumerate(nodes):
  drum_map_nodes.append(('%d' % i, p))
*/
